/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ipe_f_java_version;

import java.awt.Color;
import java.awt.Frame;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Amir72c
 */
public class main_frame extends javax.swing.JFrame {

    /**
     * Creates new form main_frame
     */
    public main_frame() {
        initComponents();
        myinitComponents();
    }
    
    About about=new About(this,true);

    public void myinitComponents() {
        int temp_height = this.getHeight();
        int temp_width = this.getWidth();
        total_image = new NewJFrame();
        under_image = new NewJFrame();
        under_image_noise = new NewJFrame();
        under_binary = new NewJFrame();
        under_binary_less_noise = new NewJFrame();
        upper_image = new NewJFrame();
        upper_curve = new NewJFrame();
        this.setSize(temp_width, temp_height);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        load_button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        directory_label = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        raw_table = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        exit_button = new javax.swing.JButton();
        about_button = new javax.swing.JButton();
        status_label = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        step_slid = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        Init_slid = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        max_slid = new javax.swing.JSlider();
        jLabel6 = new javax.swing.JLabel();
        background_slid = new javax.swing.JSlider();
        show_fig = new javax.swing.JCheckBox();
        cal_upper_curve = new javax.swing.JCheckBox();
        run_button = new javax.swing.JButton();
        cancel_button = new javax.swing.JButton();
        step_label = new javax.swing.JLabel();
        Init_label = new javax.swing.JLabel();
        max_label = new javax.swing.JLabel();
        background_label = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        result_table = new javax.swing.JTable();
        save_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Input"));

        load_button.setText("Load images");
        load_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                load_buttonActionPerformed(evt);
            }
        });

        jLabel1.setText("Directory :");

        directory_label.setText("Not set");

        raw_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Image name", "Be processed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(raw_table);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(load_button, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(jLabel1)))
                        .addGap(0, 49, Short.MAX_VALUE))
                    .addComponent(directory_label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(load_button, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(directory_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        exit_button.setText("Exit");
        exit_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_buttonActionPerformed(evt);
            }
        });

        about_button.setText("About");
        about_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                about_buttonActionPerformed(evt);
            }
        });

        status_label.setText("No calculations occured");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(status_label)
                .addGap(101, 101, 101)
                .addComponent(about_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exit_button)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(exit_button)
                        .addComponent(about_button)
                        .addComponent(status_label)))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Calculations"));

        jLabel3.setText("RGB step :");

        step_slid.setMajorTickSpacing(1);
        step_slid.setMaximum(20);
        step_slid.setMinimum(1);
        step_slid.setMinorTickSpacing(1);
        step_slid.setValue(1);
        step_slid.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                step_slidStateChanged(evt);
            }
        });

        jLabel4.setText("Initial RGB :");

        Init_slid.setMinimum(1);
        Init_slid.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                Init_slidStateChanged(evt);
            }
        });

        jLabel5.setText("Max RGB :");

        max_slid.setMaximum(255);
        max_slid.setMinimum(120);
        max_slid.setValue(170);
        max_slid.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                max_slidStateChanged(evt);
            }
        });

        jLabel6.setText("Background brightness :");

        background_slid.setMaximum(245);
        background_slid.setMinimum(140);
        background_slid.setValue(180);
        background_slid.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                background_slidStateChanged(evt);
            }
        });

        show_fig.setSelected(true);
        show_fig.setText("Show figures");

        cal_upper_curve.setText("Calculate upper curve");

        run_button.setText("Run");
        run_button.setEnabled(false);
        run_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                run_buttonActionPerformed(evt);
            }
        });

        cancel_button.setText("Cancel");
        cancel_button.setEnabled(false);
        cancel_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_buttonActionPerformed(evt);
            }
        });

        step_label.setText("1");

        Init_label.setText("50");

        max_label.setText("170");

        background_label.setText("180");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(step_slid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Init_slid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(max_slid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(background_slid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(run_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancel_button))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(step_label))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(Init_label))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(max_label))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(background_label))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(show_fig)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cal_upper_curve)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(step_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(step_slid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(Init_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Init_slid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(max_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(max_slid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(background_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(background_slid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(show_fig)
                    .addComponent(cal_upper_curve))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(run_button)
                    .addComponent(cancel_button))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

        result_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Image name", "Foot length", "Foot width", "Foot height"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(result_table);

        save_button.setText("Save results");
        save_button.setEnabled(false);
        save_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(save_button)
                .addContainerGap(177, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(save_button)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void load_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_load_buttonActionPerformed
        // TODO add your handling code here:
        JFileChooser jFileChooser1 = new javax.swing.JFileChooser();
        //jFileChooser1.addChoosableFileFilter(new FileNameExtensionFilter("Comma separated value","csv"));
        jFileChooser1.setFileFilter(new FileNameExtensionFilter("Image files", ImageIO.getReaderFileSuffixes()));
        //jFileChooser1.addChoosableFileFilter(new FileNameExtensionFilter("Text","txt"));
        jFileChooser1.setMultiSelectionEnabled(true);
        jFileChooser1.setAcceptAllFileFilterUsed(false);
        int returnVal = jFileChooser1.showOpenDialog(this);
        String[] exts = ((FileNameExtensionFilter) jFileChooser1.getFileFilter()).getExtensions();
        String final_exts = exts[0];
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //file_name = jFileChooser1.getSelectedFile().getName();
            File[] file_path = jFileChooser1.getSelectedFiles();
            //System.out.println(file_path);
            read_data(file_path, final_exts);
            //axis.repaint();
            directory_label.setText(jFileChooser1.getCurrentDirectory().getPath());
        }

    }//GEN-LAST:event_load_buttonActionPerformed

    private void step_slidStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_step_slidStateChanged
        // TODO add your handling code here:
        step_label.setText(String.valueOf(step_slid.getValue()));
    }//GEN-LAST:event_step_slidStateChanged

    private void Init_slidStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_Init_slidStateChanged
        // TODO add your handling code here:
        Init_label.setText(String.valueOf(Init_slid.getValue()));
    }//GEN-LAST:event_Init_slidStateChanged

    private void max_slidStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_max_slidStateChanged
        // TODO add your handling code here:
        max_label.setText(String.valueOf(max_slid.getValue()));
    }//GEN-LAST:event_max_slidStateChanged

    private void background_slidStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_background_slidStateChanged
        // TODO add your handling code here:
        background_label.setText(String.valueOf(background_slid.getValue()));
    }//GEN-LAST:event_background_slidStateChanged

    private void run_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_run_buttonActionPerformed
        // TODO add your handling code here:
        Thread run_thread = new Thread(new Runnable() {
            @Override
            public void run() {
                run_task();
            }
        });
        run_thread.start();

    }//GEN-LAST:event_run_buttonActionPerformed

    private void cancel_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_buttonActionPerformed
        // TODO add your handling code here:
        iscanceled = true;
    }//GEN-LAST:event_cancel_buttonActionPerformed

    private void save_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_buttonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc_save = new JFileChooser();
        fc_save.setFileFilter(new FileNameExtensionFilter("Text", "txt"));
        fc_save.setAcceptAllFileFilterUsed(false);
        int returnVal = fc_save.showSaveDialog(this);
        String[] save_exts = ((FileNameExtensionFilter) fc_save.getFileFilter()).getExtensions();
        String save_final_exts = save_exts[0];
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String file_name = fc_save.getSelectedFile().getName();
            String save_file_path = fc_save.getSelectedFile().getAbsolutePath();
            try {
                write_data(save_file_path, file_name, save_final_exts);
            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_save_buttonActionPerformed

    private void exit_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_buttonActionPerformed
        // TODO add your handling code here:
        Frame[] this_main_frame = main_frame.getFrames();
        this_main_frame[0].dispatchEvent(new WindowEvent(this_main_frame[0], WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_exit_buttonActionPerformed

    private void about_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_about_buttonActionPerformed
        // TODO add your handling code here:
        about.setVisible(true);
    }//GEN-LAST:event_about_buttonActionPerformed

    public void write_data(String file_path, String file_name, String exts) throws IOException {
        System.out.println(file_path + exts);
        String eol = System.getProperty("line.separator");
        String Generated_results = "";
        DefaultTableModel output_model = (DefaultTableModel) result_table.getModel();
        for (int i = 0; i < img.length; i++) {
            Generated_results = Generated_results + "Image name: ";
            Generated_results = Generated_results + output_model.getValueAt(i, 0);
            Generated_results = Generated_results + " Foot length: ";
            Generated_results = Generated_results + output_model.getValueAt(i, 1);
            Generated_results = Generated_results + " Foot width: ";
            Generated_results = Generated_results + output_model.getValueAt(i, 2);
            Generated_results = Generated_results + " Foot height: ";
            Generated_results = Generated_results + output_model.getValueAt(i, 3);
            Generated_results = Generated_results + eol;
        }

        //System.out.println(Paths.get(file_path+exts).toString());
        File file = new File(file_path + "." + exts);
        // creates the file
        file.createNewFile();
        // creates a FileWriter Object
        FileWriter writer = new FileWriter(file);
        // Writes the content to the file
        writer.write(Generated_results);
        writer.flush();
        writer.close();
    }

    public void run_task() {
        cancel_button.setEnabled(true);
        run_button.setEnabled(false);
        save_button.setEnabled(false);
        iscanceled = false;
        status_label.setText("Running");

        DefaultTableModel output_model = (DefaultTableModel) result_table.getModel();
        output_model.setNumRows(0);
        DefaultTableModel input_model = (DefaultTableModel) raw_table.getModel();

        int num_images = 0;
        for (int i = 0; i < img.length; i++) {
            if ((boolean)input_model.getValueAt(i, 1) == true) {
                num_images = num_images + 1;
            }
        }
        int processbar_total = (num_images * 6);
        int processbar_value = 0;

        int current_image = 0;
        for (int i = 0; i < img.length; i++) {
            if ((boolean)input_model.getValueAt(i, 1) == true) {
                if (show_fig.isSelected() == true) {
                    total_image.isfed_outside = true;
                    total_image.outside_plot_request_type = "image";
                    total_image.img = img[i];
                    total_image.setVisible(true);
                    total_image.repaint();
                }

                //BufferedImage main_data_img = img[i].getSubimage(850, 1778, 3175-850, 3000-1778);
                BufferedImage main_data_img;
                try {
                    main_data_img = img[i].getSubimage(990, 1858, 3175 - 990, 3000 - 1858);
                } catch (Exception ex) {
                    main_data_img = img[i];
                }
                int[][][] main_data_matrix;
                main_data_matrix = new int[main_data_img.getHeight()][main_data_img.getWidth()][3];
                //int temp_height = this.getHeight();
                //int temp_width = this.getWidth();
                //NewJFrame myframe=new NewJFrame();
                if (show_fig.isSelected() == true) {
                    under_image.isfed_outside = true;
                    under_image.outside_plot_request_type = "image";
                    under_image.img = main_data_img;
                    under_image.setVisible(true);
                    under_image.repaint();
                }

                for (int x = 0; x < main_data_img.getHeight(); x++) {
                    for (int y = 0; y < main_data_img.getWidth(); y++) {
                        //System.out.println(main_data_img.getRGB(y, x));
                        main_data_matrix[x][y][0] = new Color(main_data_img.getRGB(y, x)).getRed();
                        main_data_matrix[x][y][1] = new Color(main_data_img.getRGB(y, x)).getGreen();
                        main_data_matrix[x][y][2] = new Color(main_data_img.getRGB(y, x)).getBlue();
                    }
                }

                /////////////////////Under foot////////////////////////////////
                if (iscanceled == true) {
                    cancel_button.setEnabled(false);
                    break;
                }
                ////////////////////Thresholding trunk////////////////////////
                int preciseness = 0;
                float total_noise = Float.POSITIVE_INFINITY;
                float min_noise = Float.POSITIVE_INFINITY;
                float[] mean_noise_data = new float[255];
                int[] preciseness_data = new int[255];
                for (int a = 1; a < 255; a++) {
                    mean_noise_data[a] = -1;//null
                    preciseness_data[a] = -1;//null
                }
                int m = 0;
                int min_noise_preciseness = -1;//null value
                while (Init_slid.getValue() + preciseness < max_slid.getValue()) {
                    int[][][] refined_data;
                    refined_data = new int[main_data_img.getHeight()][main_data_img.getWidth()][3];
                    int count = 0;
                    for (int x = 0; x < main_data_img.getHeight(); x++) {
                        for (int y = 0; y < main_data_img.getWidth(); y++) {
                            if (main_data_matrix[x][y][0] < (Init_slid.getValue() + preciseness) && main_data_matrix[x][y][1] < (Init_slid.getValue() + preciseness) && main_data_matrix[x][y][2] < (Init_slid.getValue() + preciseness)) {
                                refined_data[x][y][0] = 255;
                                refined_data[x][y][1] = 255;
                                refined_data[x][y][2] = 255;
                                count = count + 1;
                            }
                        }
                    }

                    preciseness = preciseness + step_slid.getValue();
                    int start_foot_h = -1;//null value
                    int end_foot_h = -1;//null value
                    for (int y = 0; y < main_data_img.getWidth(); y++) {
                        for (int x = 0; x < main_data_img.getHeight(); x++) {
                            if (refined_data[x][y][0] == 255 && start_foot_h == -1) {
                                start_foot_h = y;
                                break;
                            }
                            if (refined_data[x][y][0] == 255 && start_foot_h != -1) {
                                end_foot_h = y;
                                break;
                            }
                        }
                    }
                    int[] noise_column;
                    noise_column = new int[end_foot_h - start_foot_h + 1];
                    for (int q = start_foot_h; q < end_foot_h; q++) {
                        for (int w = 0; w < main_data_img.getHeight() - 2; w++) {
                            if (refined_data[w][q][0] == 255 && refined_data[w + 1][q][0] == 0) {
                                noise_column[q - start_foot_h + 1] = noise_column[q - start_foot_h + 1] + 1;
                            }
                        }
                    }
                    float mean_noise_column = 0;
                    for (int v = 0; v < noise_column.length; v++) {
                        mean_noise_column = mean_noise_column + noise_column[v];
                    }
                    mean_noise_column = mean_noise_column / noise_column.length;

                    int start_foot_v = -1;//null value
                    int end_foot_v = -1;//null valu
                    for (int x = 0; x < main_data_img.getHeight(); x++) {
                        for (int y = 0; y < main_data_img.getWidth(); y++) {
                            if (refined_data[x][y][0] == 255 && start_foot_v == -1) {
                                start_foot_v = x;
                                break;
                            }
                            if (refined_data[x][y][0] == 255 && start_foot_v != -1) {
                                end_foot_v = x;
                                break;
                            }
                        }
                    }

                    int[] noise_row;
                    noise_row = new int[end_foot_v - start_foot_v + 1];
                    for (int w = start_foot_v; w < end_foot_v - 2; w++) {
                        for (int q = 0; q < main_data_img.getWidth(); q++) {
                            if (refined_data[w][q][0] == 255 && refined_data[w + 1][q][0] == 0) {
                                noise_row[w - start_foot_v + 1] = noise_row[w - start_foot_v + 1] + 1;
                            }
                        }
                    }
                    int egdge_noise = 0;
                    for (int y = 0; y < main_data_img.getWidth(); y++) {
                        if (refined_data[0][y][0] == 255 || refined_data[main_data_img.getHeight() - 1][y][0] == 255) {
                            egdge_noise = egdge_noise + 1;
                        }
                    }
                    for (int x = 0; x < main_data_img.getHeight(); x++) {
                        if (refined_data[x][0][0] == 255 || refined_data[x][main_data_img.getWidth() - 1][0] == 255) {
                            egdge_noise = egdge_noise + 1;
                        }
                    }
                    float mean_noise_row = 0;
                    for (int v = 0; v < noise_row.length; v++) {
                        mean_noise_row = mean_noise_row + noise_row[v];
                    }
                    mean_noise_row = mean_noise_row / noise_row.length;

                    if (count > 280000 && count < 1500000) {
                        total_noise = mean_noise_column + mean_noise_row + egdge_noise;
                        mean_noise_data[m] = total_noise;
                        preciseness_data[m] = Init_slid.getValue() + preciseness;
                        m = m + 1;
                        //System.out.println(total_noise);
                    }
                    if (total_noise < min_noise) {
                        min_noise = total_noise;
                        min_noise_preciseness = Init_slid.getValue() + preciseness;
                    }

                    if (iscanceled == true) {
                        cancel_button.setEnabled(false);
                        break;
                    }

                }
                if (show_fig.isSelected() == true) {
                    under_image_noise.data = new int[2][255];
                    for (int w = 1; w < 255; w++) {
                        if (mean_noise_data[w] != -1) {
                            under_image_noise.data[1][w] = (int) mean_noise_data[w];
                            under_image_noise.data[0][w] = preciseness_data[w];
                            under_image_noise.isfed_outside = true;
                            under_image_noise.outside_plot_request_type = "scatter";
                            under_image_noise.show_number = 0;
                            under_image_noise.marker_size = 6;
                            under_image_noise.setVisible(true);
                            under_image_noise.repaint();
                        }
                    }
                }

                //under_image_noise.data
                if (iscanceled == true) {
                    cancel_button.setEnabled(false);
                    break;
                }
                processbar_value = processbar_value + 2;
                jProgressBar1.setValue((int) (((float) processbar_value / (float) processbar_total) * 100));
                //System.out.println(min_noise_preciseness);
                int[][][] refined_data;
                refined_data = new int[main_data_img.getHeight()][main_data_img.getWidth()][3];
                for (int x = 0; x < main_data_img.getHeight(); x++) {
                    for (int y = 0; y < main_data_img.getWidth(); y++) {
                        if (main_data_matrix[x][y][0] < (min_noise_preciseness) && main_data_matrix[x][y][1] < (min_noise_preciseness) && main_data_matrix[x][y][2] < (min_noise_preciseness)) {
                            refined_data[x][y][0] = 255;
                            refined_data[x][y][1] = 255;
                            refined_data[x][y][2] = 255;
                        }
                    }
                }
                BufferedImage refined_data_img = new BufferedImage(main_data_img.getWidth(), main_data_img.getHeight(), BufferedImage.TYPE_INT_RGB);
                for (int x = 0; x < main_data_img.getHeight(); x++) {
                    for (int y = 0; y < main_data_img.getWidth(); y++) {
                        refined_data_img.setRGB(y, x, new Color(refined_data[x][y][0], refined_data[x][y][1], refined_data[x][y][2]).getRGB());
                    }
                }
                if (show_fig.isSelected() == true) {
                    under_binary.isfed_outside = true;
                    under_binary.outside_plot_request_type = "image";
                    under_binary.img = refined_data_img;
                    under_binary.setVisible(true);
                    under_binary.repaint();
                }

                processbar_value = processbar_value + 1;
                jProgressBar1.setValue((int) (((float) processbar_value / (float) processbar_total) * 100));
                ////////////////////Thresholding trunk////////////////////////
                ////////////////////Noise reduction///////////////////////////
                int counter = 0;
                for (int k = 1; k < 7; k++) {
                    for (int q = 1; q < main_data_img.getWidth() - 1; q++)//i=2:size(main_data,2)-1
                    {
                        for (int w = 1; w < main_data_img.getHeight() - 1; w++)//j=2:size(main_data,1)-1
                        {
                            if (refined_data[w][q][0] == 255) {
                                if (refined_data[w - 1][q + 1][0] == 255) {
                                    counter = counter + 1;
                                }
                                if (refined_data[w - 1][q][0] == 255) {
                                    counter = counter + 1;
                                }
                                if (refined_data[w - 1][q - 1][0] == 255) {
                                    counter = counter + 1;
                                }
                                if (refined_data[w][q + 1][0] == 255) {
                                    counter = counter + 1;
                                }
                                if (refined_data[w][q - 1][0] == 255) {
                                    counter = counter + 1;
                                }
                                if (refined_data[w + 1][q + 1][0] == 255) {
                                    counter = counter + 1;
                                }
                                if (refined_data[w + 1][q][0] == 255) {
                                    counter = counter + 1;
                                }
                                if (refined_data[w + 1][q - 1][0] == 255) {
                                    counter = counter + 1;
                                }
                                if (counter <= 4) {
                                    //refined_data(j,i,1)=0;
                                    refined_data[w][q][1] = 0;
                                    //refined_data(j,i,3)=0;
                                }
                            }
                            counter = 0;
                        }
                    }
                    for (int q = 2; q < main_data_img.getWidth() - 1; q++)//i=2:size(main_data,2)-1
                    {
                        for (int w = 2; w < main_data_img.getHeight() - 1; w++)//j=2:size(main_data,1)-1
                        {
                            if (refined_data[w][q][1] == 0 && refined_data[w][q][0] == 255) {
                                refined_data[w][q][0] = 0;
                                refined_data[w][q][1] = 255;
                                refined_data[w][q][2] = 255;
                            }
                        }
                    }
                    if (iscanceled == true) {
                        cancel_button.setEnabled(false);
                        break;
                    }
                }
                if (iscanceled == true) {
                    cancel_button.setEnabled(false);
                    break;
                }
                /////////////////////edge noise removal////////////////////////
                int q = 0;
                for (int w = 0; w < main_data_img.getWidth(); w++) {
                    if (refined_data[q][w][0] == 255) {
                        refined_data[q][w][0] = 0;
                        //refined_data(j,i,2)=0;
                        refined_data[q][w][2] = 0;
                    }
                }
                q = main_data_img.getHeight() - 1;
                for (int w = 0; w < main_data_img.getWidth(); w++) {
                    if (refined_data[q][w][0] == 255) {
                        refined_data[q][w][0] = 0;
                        //refined_data(j,i,2)=0;
                        refined_data[q][w][2] = 0;
                    }
                }
                int w = 0;
                for (q = 0; q < main_data_img.getHeight(); q++) {
                    if (refined_data[q][w][0] == 255) {
                        refined_data[q][w][0] = 0;
                        //refined_data(j,i,2)=0;
                        refined_data[q][w][2] = 0;
                    }
                }
                w = main_data_img.getWidth() - 1;
                for (q = 0; q < main_data_img.getHeight(); q++) {
                    if (refined_data[q][w][0] == 255) {
                        refined_data[q][w][0] = 0;
                        //refined_data(j,i,2)=0;
                        refined_data[q][w][2] = 0;
                    }
                }
                ////////////////////Noise reduction///////////////////////////
                processbar_value = processbar_value + 1;
                jProgressBar1.setValue((int) (((float) processbar_value / (float) processbar_total) * 100));
                ////////////////////Refind start and end//////////////////////
                int start_foot_h = -1;//null value
                int end_foot_h = -1;//null value
                if (iscanceled == true) {
                    cancel_button.setEnabled(false);
                    break;
                }
                for (int y = 0; y < main_data_img.getWidth(); y++) {
                    for (int x = 0; x < main_data_img.getHeight(); x++) {
                        if (refined_data[x][y][0] == 255 && start_foot_h == -1) {
                            start_foot_h = y;
                            break;
                        }
                        if (refined_data[x][y][0] == 255 && start_foot_h != -1) {
                            end_foot_h = y;
                            break;
                        }
                    }
                }
                int start_foot_v = -1;//null value
                int end_foot_v = -1;//null valu
                for (int x = 0; x < main_data_img.getHeight(); x++) {
                    for (int y = 0; y < main_data_img.getWidth(); y++) {
                        if (refined_data[x][y][0] == 255 && start_foot_v == -1) {
                            start_foot_v = x;
                            break;
                        }
                        if (refined_data[x][y][0] == 255 && start_foot_v != -1) {
                            end_foot_v = x;
                            break;
                        }
                    }
                }
                //System.out.println(end_foot_h-start_foot_h);
                //System.out.println(end_foot_v-start_foot_v);
                double foot_length_under = end_foot_h - start_foot_h;
                double foot_width_under = end_foot_v - start_foot_v;
                ////////////////////Refind start and end//////////////////////
                refined_data_img = new BufferedImage(main_data_img.getWidth(), main_data_img.getHeight(), BufferedImage.TYPE_INT_RGB);
                for (int x = 0; x < main_data_img.getHeight(); x++) {
                    for (int y = 0; y < main_data_img.getWidth(); y++) {
                        refined_data_img.setRGB(y, x, new Color(refined_data[x][y][0], refined_data[x][y][1], refined_data[x][y][2]).getRGB());
                    }
                }
                if (show_fig.isSelected() == true) {
                    under_binary_less_noise.isfed_outside = true;
                    under_binary_less_noise.outside_plot_request_type = "image";
                    under_binary_less_noise.img = refined_data_img;
                    under_binary_less_noise.setVisible(true);
                    under_binary_less_noise.repaint();
                }

                if (iscanceled == true) {
                    cancel_button.setEnabled(false);
                    break;
                }
                /////////////////////Under foot////////////////////////////////
                /////////////////////Upper foot////////////////////////////////
                //main_data=init_data(1:1325,315:3560,:);
                try {
                    main_data_img = img[i].getSubimage(315, 1, 3560 - 315, 1325 - 1);
                } catch (Exception ex) {
                    processbar_value=processbar_value+2;
                    jProgressBar1.setValue((int) (((float) processbar_value / (float) processbar_total) * 100));
                    current_image = current_image + 1;
                    continue;
                }
                main_data_matrix = new int[main_data_img.getHeight()][main_data_img.getWidth()][3];
                //int temp_height = this.getHeight();
                //int temp_width = this.getWidth();
                //NewJFrame myframe=new NewJFrame();
                if (show_fig.isSelected() == true) {
                    upper_image.isfed_outside = true;
                    upper_image.outside_plot_request_type = "image";
                    upper_image.img = main_data_img;
                    upper_image.setVisible(true);
                    upper_image.repaint();
                }
                for (int x = 0; x < main_data_img.getHeight(); x++) {
                    for (int y = 0; y < main_data_img.getWidth(); y++) {
                        //System.out.println(main_data_img.getRGB(y, x));
                        main_data_matrix[x][y][0] = new Color(main_data_img.getRGB(y, x)).getRed();
                        main_data_matrix[x][y][1] = new Color(main_data_img.getRGB(y, x)).getGreen();
                        main_data_matrix[x][y][2] = new Color(main_data_img.getRGB(y, x)).getBlue();
                    }
                }
                int back_reached = 0;
                int fore_reached = 0;
                int height_y_under = 0;
                for (q = 0; q < main_data_img.getHeight(); q++)//i=1:size(main_data,1)
                {
                    if (main_data_matrix[main_data_img.getHeight() - q - 1][(int) (main_data_img.getWidth() / 2)][0] < 100 && main_data_matrix[main_data_img.getHeight() - q - 1][(int) (main_data_img.getWidth() / 2)][1] < 100 && main_data_matrix[main_data_img.getHeight() - q - 1][(int) (main_data_img.getWidth() / 2)][2] < 100) {
                        height_y_under = q;
                        break;
                    }
                }
                int[] back = new int[2];
                int[] fore = new int[2];
                for (w = 0; w < main_data_img.getWidth(); w++)//j=1:size(main_data,2)
                {
                    for (q = Math.round(main_data_img.getHeight() / 2); q < main_data_img.getHeight() - height_y_under - 40; q++)//i=round(size(main_data,1)/2):size(main_data,1)-height_y_under-40
                    {
                        if (main_data_matrix[q][w][0] < background_slid.getValue() && main_data_matrix[q][w][1] < background_slid.getValue() && main_data_matrix[q][w][2] < background_slid.getValue() && back_reached == 0) {
                            back_reached = 1;
                            back[0] = q;
                            back[1] = w;
                        }
                        if (main_data_matrix[q][w][0] < background_slid.getValue() && main_data_matrix[q][w][1] < background_slid.getValue() && main_data_matrix[q][w][2] < background_slid.getValue() && back_reached == 1) {
                            fore[0] = q;
                            fore[1] = w;
                            fore_reached = 1;
                        }
                    }
                }
                if (iscanceled == true) {
                    cancel_button.setEnabled(false);
                    break;
                }
                int foot_length_upper = fore[1] - back[1];

                processbar_value = processbar_value + 1;
                jProgressBar1.setValue((int) (((float) processbar_value / (float) processbar_total) * 100));
                //System.out.println(foot_length_upper);
                if (cal_upper_curve.isSelected() == true) {
                }
                int height_x = back[1] + Math.round(foot_length_upper / 2);
                int height_y_upper = 0;
                //System.out.println(height_x);
                for (q = 0; q < main_data_img.getHeight(); q++)//i=1:size(main_data,1)
                {
                    if (main_data_matrix[q][height_x][0] < background_slid.getValue() && main_data_matrix[q][height_x][1] < background_slid.getValue() && main_data_matrix[q][height_x][2] < background_slid.getValue()) {
                        height_y_upper = q;
                        break;
                    }
                }
                //System.out.println(height_y_upper);
                for (q = 0; q < main_data_img.getHeight(); q++)//i=1:size(main_data,1)
                {
                    if (main_data_matrix[main_data_img.getHeight() - i - 1][height_x][0] < 100 && main_data_matrix[main_data_img.getHeight() - i - 1][height_x][1] < 100 && main_data_matrix[main_data_img.getHeight() - i - 1][height_x][2] < 100) {
                        height_y_under = q;
                        break;
                    }
                }
                //System.out.println(height_y_under);
                int foot_height = main_data_img.getHeight() - height_y_upper - height_y_under;
                /////////////////////Upper foot////////////////////////////////
                /////////////////////Scaling///////////////////////////////////
                int x = start_foot_v;
                double scalefcn_upper = 0.06639 * x + 99.23;
                //y=eval(scalefcn_upper);
                double foot_length_upper_final = foot_length_upper / scalefcn_upper;
                double foot_height_final = foot_height / scalefcn_upper;
                double scalefcn_under = 0.025 * x + 73;
                //y=eval(scalefcn_under);
                double foot_length_under_final = foot_length_under / scalefcn_under;
                //foot_length_under
                double foot_width_under_final = foot_width_under / scalefcn_under;

                processbar_value = processbar_value + 1;
                jProgressBar1.setValue((int) (((float) processbar_value / (float) processbar_total) * 100));

                output_model.addRow(new Object[]{input_model.getValueAt(current_image, 0), foot_length_under_final, foot_width_under_final, foot_height_final});


                current_image = current_image + 1;
            }
        }


        if (iscanceled == false) {
            save_button.setEnabled(true);
            status_label.setText("Done");
        } else {
            status_label.setText("Canceled");
        }
        cancel_button.setEnabled(false);
        run_button.setEnabled(true);
    }

    public void read_data(File[] file_name, String final_exts) {
        img = new BufferedImage[file_name.length];
        DefaultTableModel model = (DefaultTableModel) raw_table.getModel();
        model.setNumRows(file_name.length);
        for (int i = 0; i < file_name.length; i++) {

            try {
                img[i] = ImageIO.read(file_name[i]);
            } catch (IOException ex) {
                Logger.getLogger(main_frame.class.getName()).log(Level.SEVERE, null, ex);
            }
            //ProcessBuilder pb = new ProcessBuilder("cmd", "/c", "PLOT.jar " + file_name[i].getAbsolutePath().replace("\\", "\\\\"));
            //try {
            //Process p = pb.start();
            //} catch (IOException ex) {
            //Logger.getLogger(main_frame.class.getName()).log(Level.SEVERE, null, ex);
            //}

            model.setValueAt(file_name[i].getName(), i, 0);
            model.setValueAt(true, i, 1);
        }
        run_button.setEnabled(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main_frame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Init_label;
    private javax.swing.JSlider Init_slid;
    private javax.swing.JButton about_button;
    private javax.swing.JLabel background_label;
    private javax.swing.JSlider background_slid;
    private javax.swing.JCheckBox cal_upper_curve;
    private javax.swing.JButton cancel_button;
    private javax.swing.JLabel directory_label;
    private javax.swing.JButton exit_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton load_button;
    private javax.swing.JLabel max_label;
    private javax.swing.JSlider max_slid;
    private javax.swing.JTable raw_table;
    private javax.swing.JTable result_table;
    private javax.swing.JButton run_button;
    private javax.swing.JButton save_button;
    private javax.swing.JCheckBox show_fig;
    private javax.swing.JLabel status_label;
    private javax.swing.JLabel step_label;
    private javax.swing.JSlider step_slid;
    // End of variables declaration//GEN-END:variables
    boolean iscanceled = false;
    BufferedImage[] img;
    NewJFrame total_image;
    NewJFrame under_image;
    NewJFrame under_image_noise;
    NewJFrame under_binary;
    NewJFrame under_binary_less_noise;
    NewJFrame upper_image;
    NewJFrame upper_curve;
}
